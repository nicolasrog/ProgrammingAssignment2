mean(density.ratio[heart=="B" & position=="Atrium"])
length(density.ratio[heart=="B" & position=="Atrium"])
length(density.ratio[heart=="F" & position=="Atrium"])
mean(density.ratio[heart=="F" & position=="Atrium"])
mean(density.ratio[heart=="G" & position=="Atrium"])
mean(density.ratio[heart=="H" & position=="Atrium"])
mean(density.ratio[heart=="E" & position=="Atrium"])
mean(density.ratio[heart=="D" & position=="Ventricle"])
length(density.ratio[heart=="D" & position=="Ventricle"])
length(density.ratio[heart=="E" & position=="Atrium"])
length(density.ratio[heart=="H" & position=="Atrium"])
length(density.ratio[heart=="G" & position=="Atrium"])
boxplot(density.ratio~treatment+position+heart)
boxplot(density.ratio[position=="A"~treatment+heart)
boxplot(density.ratio[position=="Atrium"~treatment+heart)
boxplot(density.ratio[position=="Atrium"]~treatment+heart)
boxplot(dat1$density.ratio[position=="Atrium"]~dat1$treatment)
boxplot(density.ratio~heart+position+treatment)
boxplot(density.ratio~heart+treament+position)
boxplot(density.ratio~heart+treatment+position)
?scatterplot()
?stripchart()
stripchart(dat3)
stripchart(density.ratio,dat3,method="jitter",vertical=T,group.names)
save.image("~/Desktop/EM-Mito/EM-Mito2.RData")
savehistory("~/Desktop/EM-Mito/EM-Mito2-History.Rhistory")
load("~/Desktop/EM-Mito/EM-Mito3m2.RData")
str(c)
c
mode(c)
class(c)
prop.table(c,2)
View(c)
mode(dat2)
class(dat2)
names(dat2)
rm(dat2)
??hosmer()
??lemeshow()
??test.hl()
??logoistic
??logistic
logistic regression
?? logistic
??HLtest()
??HosmerLemshow
??HosmerLemeshow
??HLtest
install.packages("vcd", lib="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
install.packages("vcdExtra", lib="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
?validate()
??validate()
library("rms", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
?validate()
install.packages("swirl", lib="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
?vector()
vector(mode="integer",length=10)
a <- vector(mode="integer",length=10)
a
is.vector(a)
b <- seq(1:10)
b
class(b)
mode(b)
b <- as.vector(b)
b
is.vector(b)
ls()
c <- 1
c
class(c)
mode(c)
d <- 1L
d
class(d)
mode(d)
ls()
rm(a,b,c,d)
a <- c(1,3,5,NA,7)
which(a==NA)
which[a=NA]
which(a=NA)
?which()
is.NA(a)
is.Na(a)
is.NA5c
is.na(a)
is.NaN(a)
is.nan(a)
n <- as.date("2014-08-14")
n <- as.Date("2014-08-14")
unclass(n)
o <- as.date("1973-12-24")
o <- as.Date("1973-12-24")
o
unclass(o)
16296-1453
100000/365
10000/365
14843/365
30000/365
?time()
?weekdays
weekdays()
weekdays(2)
weekdays(o)
weekdays(n)
p <- as.Date("1793-01-21")
unclass(p)
weekdays(p)
q <- as.Date("1793-01-22")
unclass(q)
weekdays(q)
r <- as.Date("2008-05-11")
unclass(r)
weekdays(r)
s <- as.Date("2012-08-02")
unclass(s)
weekdays(s)
t <- as.Date("1975-07-25")
weekdays(t)
?minth()
?month()
?months()
months(n)
months(o)
months(t)
syst.time()
Sys.time()
jdv <- function(date){a <- as.Date("date")}
jdv
rm(jdv)
jdv <- function(date){a <- as.Date("date")
b <- Sys.time()
cat("Vous êtes en vie depuis",b-a,"jours")
}
jdv
jdv(1973-24-12)
jdv(1973-24-12)
rm(jdv)
jdv <- function(date){a <- unclass(as.Date("date"))
b <- Sys.time()
cat("Vous êtes en vie depuis",b-a,"jours")
}
Sys.time()
c <- as.Date(Sys.time())
c
rm(jdv)
dv <- function(date){a <- unclass(as.Date("date"))
b <- unclass(as.Date(Sys.time())
cat("Vous êtes en vie depuis",b-a,"jours")
}
rm(c)
unclass(as.Date(Sys.time()))
jdv <- function(date){a <- unclass(as.Date("date"))
b <- unclass(as.Date(Sys.time()))
cat("Vous êtes en vie depuis",b-a,"jours")
}
jdv(1973-12-24)
print("je suis nicolas")
cat("je suis nicolas")
rm(jdv)
a <- unclass(as.Date(1973-12-24))
a <- unclass(as.Date("1973-12-24"))
a
b <- unclass(as.Date(Sys.time()))
b
b-a
rm(a,b)
jdv <- function(date){a <- unclass(as.Date(date))
b <- unclass(as.Date(Sys.time()))
cat("Vous êtes en vie depuis",b-a,"jours")
}
jdv("1972-12-24")
weekdays(1973-12-24)
weekdays("1973-12-24")
weekdays(as.Date("1973-12-24"))
rm(jdv)
jdv <- function(date){a <- as.Date(date)
b <- unclass(as.Date(Sys.time()))
c <- weekdays(a)
cat("Vous êtes en vie depuis",b-unclass(a),"jours")
cat("Votre jour de naissance était un",c)
}
jdv("1973-12-24")
jdv("1975-07-25")
jdv("1941-07-22")
?cat()
rm(jdv)
jdv <- function(date){a <- as.Date(date)
b <- unclass(as.Date(Sys.time()))
c <- weekdays(a)
cat("Vous êtes en vie depuis",b-unclass(a),"jours.")
cat("Votre jour de naissance était un",c,fill=T)
}
jdv("2006-07-09")
rm(jdv)
jdv <- function(date){a <- as.Date(date)
b <- unclass(as.Date(Sys.time()))
c <- weekdays(a)
cat("Vous êtes en vie depuis",b-unclass(a),"jours.","Votre jour de naissance était un",c,fill=T)
}
jdv("2008-05-11")
rm(jdv)
jdv <- function(date){a <- as.Date(date)
b <- unclass(as.Date(Sys.time()))
c <- weekdays(a)
cat("Vous êtes en vie depuis",b-unclass(a),"jours.","Votre jour de naissance était un",c)
}
jdv("2012-08-02")
jdv("1935-10-06")
jdv <- function(date){a <- as.Date(date)
b <- unclass(as.Date(Sys.time()))
c <- weekdays(a)
cat("Vous êtes en vie depuis",b-unclass(a),"jours.","Votre jour de naissance était un",c)
}
jdv("1962-08-04")
??swirl
install.packages("swirl")
swril()
swirl()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c()
?c
z
c(z,555,z,)
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_sqrt
my_div
bye()
swril()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
bye()
swril()
swirl()
1:20
pi:10
15:1
?":"
seq(1,20)
seq(0,10,0.5)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
lenght(my_seq)
length(my_Seq)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect<1
tf
num_vect>=6 <- nv
nv <- num_vect>=6
num_vect>=6
my_char <- c("My","name","is")
my_char
paste(my_char,collapse=" ")
c(my_char,"nicolas")
my_name <- c(my_char,"nicolas")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
data(iris)
str(iris)
?apply()
mean(iris$Sepal.Length)
?tapply()
tapply(iris,Species,mean)
tapply(iris,iris$Species==virginica,mean)
tapply(iris,"virginica",mean)
tapply(iris,iris$Species=="virginica",mean)
tapply(iris,Species=="virginica",mean)
tapply(iris$Species,"virginica",mean)
lapply(iris,mean)
lapply(iris$Sepal.length,mean)
apply(iris,2,mean)
lapply(iris$Sepal=="virginica.length,mean)
sd()
tapply(iris$Species,"viriginica",mean)
mean(iris$Species)
tapply(iris$Species,"virginica",mean,na.rm=T)
tapply(iris$Sepal.Length,virginica,mean,na.rm=T)
tapply(iris$Sepal.Length,iris$Species=="virginica",mean,na.rm=T)
tapply(iris$Sepal.Length,iris$Species=="virginica",length,na.rm=T)
tapply(iris$Sepal.Length,iris$Species=="virginica",length)
View(iris)
colMeans(iris)
apply(iris[,1:4],2,mean)
data(mtcars)
str(mtcars)
tapply(mtcars$mpg,mtcars$cyl,mean)
tapply(mtcars$hp,mtcars$cyl==4,mean)
tapply(mtcars$hp,mtcars$cyl==8,mean)
tapply(mtcars$hp,mtcars$cyl==8,mean)-tapply(mtcars$hp,mtcars$cyl==4,mean)
debug(ls)
?debug()
end
search()
librayr("ald4")
library("ald4")
install.packages("alr4")
search()
library("survival")
search()
data("heart")
str(heart)
head(heart)
View(heart)
?params
?params()
??params
m <- matric(1:4,2)
matrix(&:4,2,2)
matrix(1:4,2,2)
m <- matrix(1:4,2)
m
solve(m)
rm(m)
m <- matrix(1:6,2)
m
solve(m)
rm(m)
m <- matrix(1:6,2)
det(m)
rm(m)
m <- matrix(1:4,2)
m
det(m)
solve(m)
x <- numeric(0)
x
mode(x)
class(x)
is.data.frame(x)
is.vector(x)
rm(x)
x <- matrix()
x
mode(x)
class(x)
rm(x)
x <- matrix(numeric())
x
mode(x)
class(x)
ls(environnement(x))
ls(environment(x))
ls(environment(m))
makeCacheMatrix <- function(x=matrix(numeric())){
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
?makeCacheMatrix()
cacheSolve <- function(x,...){
m <- x$getinverse()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data,...)
x$setinverse(m)
}
x <- matrix(1:4,2)
rm(x)
mat <- matrix(1:4,2)
mat
makeCacheMatrix(mat)
cacheSolve(mat)
rm(cacheSolve,makeCacheMatrix)
makeVector <- function(x=numerix()){
m <- NULL
set <- function(y){
x <<-y
m <<-NULL
}
get <- function()x
setmean <- function(mean) m <<-mean
getmean <- function() m
liest(set=set,get=get,setmean=setmean,getmean=getmean)
}
cachemean <- function(x,...){
m <- x$getmean()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data,...)
x$setmean(m)
}
makeVector(1:6)
rm(makeVector)
makeVector <- function(x=numerix()){
m <- NULL
set <- function(y){
x <<-y
m <<-NULL
}
get <- function()x
setmean <- function(mean) m <<-mean
getmean <- function() m
list(set=set,get=get,setmean=setmean,getmean=getmean)
}
makeVector <- function(x=numerix()){
m <- NULL
set <- function(y){
x <<-y
m <<-NULL
}
get <- function()x
setmean <- function(mean) m <<-mean
getmean <- function() m
list(set=set,get=get,setmean=setmean,getmean=getmean)
}
makeVector(1:6)
cachemean(1:6)
ll <- makeVector(1:6)
cachemean(ll)
ll
rm(m)
rm(ll)
vec <- c(1,2,3,4)
makeVector(vec)
ll <- makeVector(vec)
cachemean(ll)
rm(cachemean)
rm(ll)
cachemean <- function(x,...){
m <- x$getmean()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data,...)
x$setmean(m)
m
}
lis <- makeVector(vec)
cachemean(lis)
?store()
??store()
install.packages("SOAR")
makeCacheMatrix <- function(x=matrix(numeric())){
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(x,...){
m <- x$getinverse()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data,...)
x$setinverse(m)
m
}
mat
ll <- makeCacheMatrix(mat)
ll
cacheSolve(ll)
setwd("~/MOOC-repo/ProgrammingAssignment2")
cacheSolve(ll)
ll$get()
ll$set()
ll$getinverse()
ll$getinverse
ll$setinverse()
ll
ll$get
ll$get()
ll$set()
